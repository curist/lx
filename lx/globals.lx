fn _1(cb) { fn(x) { cb(x) } }
fn _2(cb) { fn(x, y) { cb(x, y) } }
fn _3(cb) { fn(x, y, z) { cb(x, y, z) } }

fn do(x, cb) { cb(x) }

fn first(coll) { coll[0] }
fn last(coll) { coll[len(coll) - 1] }

fn each(arr, cb) {
  let length = len(arr)
  let aborted = false
  fn abort() { aborted = true }
  for let i = 0; i < length and !aborted; i = i + 1 {
    cb(arr[i], i, arr, abort)
  }
}

fn fold(arr, acc, cb) {
  let length = len(arr)
  let aborted = false
  fn abort() { aborted = true }
  for let i = 0; i < length and !aborted; i = i + 1 {
    acc = cb(acc, arr[i], i, abort)
  }
  acc
}

fn foldr(arr, acc, cb) {
  let length = len(arr)
  let aborted = false
  fn abort() { aborted = true }
  for let i = length - 1; i >= 0 and !aborted; i = i - 1 {
    acc = cb(acc, arr[i], i, abort)
  }
  acc
}

fn map(arr, cb) {
  let result = []
  let length = len(arr)
  for let i = 0; i < length; i = i + 1 {
    push(result, cb(arr[i], i, arr))
  }
  result
}

fn filter(arr, cb) {
  fold(arr, [], fn(acc, x, i) {
    if cb(x, i, arr) { push(acc, x) }
    acc
  })
}

fn contains(arr, target) {
  if type(arr) != "string" {
    let contains = false
    each(arr, fn(x, _, _, abort) {
      if x == target {
        contains = true
        abort()
      }
    })
    return contains
  }
  // handle string contains
  if type(target) != "string" {
    return false
  }
  if len(target) == 0 {
    return true
  }
  let s = range(arr)
  let slen = len(s)
  // using range to handle utf-8 string length correctly
  let tlen = len(range(target))
  // inefficient, i know
  for let i = 0; i < slen; i = i + 1 {
    if s->drop(i)->take(tlen)->join("") == target {
      return true
    }
  }
  false
}

fn take(arr, n) {
  let result = []
  let length = len(arr)
  for let i = 0; i < length and i < n; i = i + 1 {
    push(result, arr[i])
  }
  result
}

fn drop(arr, n) {
  let result = []
  let length = len(arr)
  for let i = n; i < length; i = i + 1 {
    push(result, arr[i])
  }
  result
}

fn startsWith(s, prefix) {
  if type(s) != "string" or type(prefix) != "string" { return false }
  if len(prefix) > len(s) { return false }
  range(s)->take(len(prefix))->join("") == prefix
}

fn endsWith(s, suffix) {
  if type(s) != "string" or type(suffix) != "string" { return false }
  let slen = len(s)
  let sfxlen = len(suffix)
  if sfxlen > slen { return false }
  range(s)->drop(slen - sfxlen)->join("") == suffix
}

return .{
  _1: _1,
  _2: _2,
  _3: _3,
  do: do,
  first: first,
  last: last,
  each: each,
  fold: fold,
  foldr: foldr,
  map: map,
  filter: filter,
  contains: contains,
  take: take,
  drop: drop,
  startsWith: startsWith,
  endsWith: endsWith,
}
