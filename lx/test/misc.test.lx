let suite = (import "test/makeTestSuite.lx")()
let test = suite.defineTest

let lib = import "src/lib.lx"

test("concat", fn(assert) {
  let arr1 = [1]
  let arr2 = [2]
  assert.equal(len(arr1), 1)
  // concat shouldn't affect original arr
  concat(arr1, arr2)
  assert.equal(len(arr1), 1)
  arr1 = concat(arr1, arr2)
  assert.equal(len(arr1), 2)

  arr2 = []
  arr1 = concat(arr1, arr2)
  assert.equal(len(arr1), 2)
})

test("unicode", fn(assert) {
  assert.equal(len("你好世界"), 12)
  assert.equal(len("やれやれだぜ"), 18)
  assert.equal(len(range("やれやれだぜ")), 6)
})

test("->", fn(assert) {
  fn add(a, b) { a + b }
  fn mul(a, b) { a * b }
  let result = 2->do(fn(x) { x->add(3) })->mul(4)
  assert.equal(result, 20)
})

test("keyword as hashmap key", fn(assert) {
  let x = .{ and: 1, if: 2 }
  assert.equal(x.and, 1)
  assert.equal(x.if, 2)
})

test("for loop - break", fn(assert) {
  let counter = 0
  for let i = 0; i < 10; i = i + 1 {
    counter = counter + 1
    if counter == 5 { break }
  }
  assert.equal(counter, 5)

  counter = 0
  for let i = 0; i < 10; i = i + 1 {
    counter = counter + 1
    if counter == 7 { break }
  }
  assert.equal(counter, 7)

  counter = 0
  for let i = 0; i < 10; i = i + 1 {
    counter = counter + 1
    if counter == 3 { break }
  }
  assert.equal(counter, 3)
})

test("for in", fn(assert) {
  let counter = 0
  // for i in range(10) {
  //   counter = counter + 1
  // }
  // assert.equal(counter, 10)
})

suite.run()
