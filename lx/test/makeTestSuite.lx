fn makeTestSuite() {
  let tests = []
  let totalAssertions = 0
  let passedAssertions = 0

  fn defineTest(testName, testBody) {
    let testPassed = true
    let testAssertions = 0
    let assert = .{
      equal: fn(actual, expect) {
        totalAssertions = totalAssertions + 1
        testAssertions = testAssertions + 1
        if expect == actual {
          passedAssertions = passedAssertions + 1
          return
        }
        print(
          "assertion fail (" + str(testAssertions) + "):", testName, "\n",
          "\texpect:", expect, "\n",
          "\tactual:", actual, "\n",
        )
        testPassed = false
      },
      truthy: fn(actual) {
        totalAssertions = totalAssertions + 1
        testAssertions = testAssertions + 1
        if actual {
          passedAssertions = passedAssertions + 1
          return
        }
        print(
          "assertion fail (" + str(testAssertions) + "):", testName, "\n",
          "\texpect to be truthy:", actual, "\n",
        )
        testPassed = false
      },
    }
    push(tests, fn() {
      testBody(assert)
      testPassed
    })
  }

  fn run() {
    let passedTests = range(tests)->fold(0, fn(acc, testCase) {
      acc + { testCase() and 1 or 0 }
    })
    print(
      "passed tests", str(passedTests) + "/" + len(tests)->str(),
      "asserts", str(passedAssertions) + "/" + str(totalAssertions),
    )

    Lx.exit(len(tests) == passedTests and 0 or 1)
  }

  return .{
    defineTest: defineTest,
    run: run,
  }
}
