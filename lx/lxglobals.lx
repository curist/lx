fn _1(cb) { fn(x) { cb(x) } }
fn _2(cb) { fn(x, y) { cb(x, y) } }
fn _3(cb) { fn(x, y, z) { cb(x, y, z) } }

fn each(arr, cb) {
  let length = len(arr)
  let aborted = false
  fn abort() { aborted }
  for let i = 0; i < length and !aborted; i = i + 1 {
    cb(arr[i], i, arr, abort)
  }
}

fn fold(arr, acc, cb) {
  let length = len(arr)
  for let i = 0; i < length; i = i + 1 {
    acc = cb(acc, arr[i], i) 
  }
  acc
}

fn foldr(arr, acc, cb) {
  let length = len(arr)
  for let i = length - 1; i >= 0; i = i - 1 {
    acc = cb(acc, arr[i], i) 
  }
  acc
}

fn map(arr, cb) {
  let result = []
  let length = len(arr)
  for let i = 0; i < length; i = i + 1 {
    push(result, cb(arr[i], i, arr))
  }
  result
}

fn filter(arr, cb) {
  fold(arr, [], fn(acc, x, i) {
    if cb(x, i, arr) { push(acc, x) }
    acc
  })
}

fn take(arr, n) {
  let result = []
  let length = len(arr)
  for let i = 0; i < length and i < n; i = i + 1 {
    push(result, arr[i])
  }
  result
}

fn drop(arr, n) {
  let result = []
  let length = len(arr)
  for let i = n; i < length; i = i + 1 {
    push(result, arr[i])
  }
  result
}

fn startsWith(s, prefix) {
  if len(prefix) > len(s) { return false }
  range(s)->take(len(prefix))->join("") == prefix
}

fn endsWith(s, suffix) {
  let slen = len(s)
  let sfxlen = len(suffix)
  if sfxlen > slen { return false }
  range(s)->drop(slen - sfxlen)->join("") == suffix
}
