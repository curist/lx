let suite = (import "test/makeTestSuite.lx")()
let test = suite.defineTest

test("concat", fn(assert) {
  let arr1 = [1]
  let arr2 = [2]
  assert.equal(len(arr1), 1)
  // concat shouldn't affect original arr
  concat(arr1, arr2)
  assert.equal(len(arr1), 1)
  arr1 = concat(arr1, arr2)
  assert.equal(len(arr1), 2)

  arr2 = []
  arr1 = concat(arr1, arr2)
  assert.equal(len(arr1), 2)
})

test("unicode", fn(assert) {
  assert.equal(len("你好世界"), 12)
  assert.equal(len("やれやれだぜ"), 18)
  assert.equal(len(range("やれやれだぜ")), 6)
})

test("->", fn(assert) {
  fn add(a, b) { a + b }
  fn mul(a, b) { a * b }
  let result = 2->do(fn(x) { x->add(3) })->mul(4)
  assert.equal(result, 20)
})

test("keyword as hashmap key", fn(assert) {
  let x = .{ and: 1, if: 2 }
  assert.equal(x.and, 1)
  assert.equal(x.if, 2)
})

test("else expression", fn(assert) {
  assert.equal(if false {0} else {1}, 1)
})

suite.run()
